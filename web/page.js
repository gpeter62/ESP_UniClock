//Example config that UI recieves
var configuration = {
    version : '2.1.3',
    temperature : "21",
    humidity : "34",

    day : '8:00',
    night : '22:00',
    cb_auto_day_night : '1',
    

};

//Runs, when HTML document is fully loaded
$(document).ready(function(){
    Init();
});

function sendMsgToArduino(key,value) {
    $.get('/arduino/msg/' + key + "=" + value + '/',
        function(){
            console.log("Message sent");
        }
    );
    return false;
}

//Contains the most important initializes
function Init(){
    setTimeout(function(){
        sendMsgToArduino("cb_auto_day_night","1");
    },1000);

    setTimeout(function(){
        sendMsgToArduino("day","09_45");
    },1000);    
    
    //binds custom switch functionality
    $('.switcher').on('click',function(){
        $('#'+$(this).attr('for')).prop('checked',!$('#'+$(this).attr('for')).is(":checked"));
    });
    
    //binds custom switch text functionality
    $('.switcher-text').on('click',function(){
        $('#'+$(this).attr('for')).prop('checked',$(this).hasClass('right'));
    });

    //fills autogenerated select drop downs
    /*
    Possible css class:
    two-digit   - fills with two digit values if value lower than 10
    Possible attributes:
    min    (mandatory)    - auto generation's minimum value
    max    (mandatory)    - auto generation's maximum value
    step   (optional)     - auto generation's step, if not set, default is 1
    prefix (optional)     - concatanate this string before value
    suffix (optional)     - concatanate this string after value
    */
    $('.number-select').each(function(){
        let from = $(this).attr('min')*1;
        let to = $(this).attr('max')*1;
        let step = !!$(this).attr('step') ? !!$(this).attr('step') : 1;
        
        for(let i = from; i < to+1; i){
            let value = $(this).hasClass('two-digit') ? formatToTwoDigit(i) : i;
            let text_value = value;
            if($(this).attr('prefix') != null){
                text_value = $(this).attr('prefix') + text_value
            }
            if($(this).attr('suffix') != null){
                text_value += $(this).attr('suffix')
            }
            $(this).append('<option value="'+value+'">'+text_value+'</option>');
            i += step;
        }        
    });

    //fills the inputs with configuration values
    for(var index in configuration){
        let value = configuration[index];
        if(index == 'day' || index == 'night'){
            value = value.split(':');
            $('#'+index+'Hours').val(formatToTwoDigit(value[0]));
            $('#'+index+'Minutes').val(formatToTwoDigit(value[1]));
        }
        else if(index.startsWith('cb_') && value*1 === 1){
            $('#'+index).trigger('click');
        }
    }

    //sets a possible good timezone, if not already set
    if(!configuration['utc_offset']){
        //Intl.DateTimeFormat().resolvedOptions().timeZone <- I am in this Zone
        var tryToFindCurrentZone = -(new Date().getTimezoneOffset() / 60);
        $('#utc_offset').val(tryToFindCurrentZone);
    }

    //Set current date
    setCurrentTime();
    setInterval(setCurrentTime,1000);   //refreshes time every second
}

function setCurrentTime(){
    $('#currentTime').html(getCurrentTime());
}

//Gets the current time from browser and gives back as readable format
function getCurrentTime(){
    var today = new Date();
    var dd = formatToTwoDigit(today.getDate());
    var mm = formatToTwoDigit(today.getMonth()+1); 
    var yyyy = today.getFullYear();
    var hour = formatToTwoDigit(today.getHours());
    var minute = formatToTwoDigit(today.getMinutes());
    return yyyy+"-"+mm+"-"+dd+" "+hour+":"+minute;
}

//if number is lower than 10, adds a zero
function formatToTwoDigit(number){
    return ("0" + number).slice(-2);
}